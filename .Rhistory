} else if (tf == "Crisis") {
crisis_port_returns = Return.portfolio(returns_matrix[start_ind:(end_ind-ind_diff),], w)
comparison = data.frame(spy.ret, crisis_port_returns)
} else if (tf == "Post-Crisis") {
post_crisis_port_returns = Return.portfolio(returns_matrix[start_ind:(end_ind-ind_diff),], w)
comparison = data.frame(spy.ret, post_crisis_port_returns)
}
names(comparison) = c('SPY Returns', 'Portfolio Returns')
chart.CumReturns(comparison, main= paste(tf, "where beta = ", target_beta), wealth.index = TRUE, legend.loc = 'topright')
}
target_beta = -1
# Pre-Crisis
returns_func(returns_matrix, target_beta, "2007-03-01", "2007-11-30", start_pre_crisis, end_pre_crisis, 2, "Pre-Crisis")
target_beta = -1
# Pre-Crisis
returns_func(returns_matrix, target_beta, "2007-03-01", "2007-11-30", start_pre_crisis, end_pre_crisis, 2, "Pre-Crisis")
# Crisis
returns_func(returns_matrix, target_beta, "2007-12-03", "2009-06-01", start_crisis, end_crisis, 1, "Crisis")
# Post-Crisis
returns_func(returns_matrix, target_beta, "2009-06-02", "2019-10-29", start_post_crisis, end_post_crisis, 2, "Post-Crisis")
#### Mean Returns (daily)
mean.ret.pre.cris.bet_1 = mean(precrisis_port_returns)
####### IMPORTANT DETAILS
library("rsconnect")
library("PortfolioAnalytics")
library("xts")
library("stats")
library("cluster")
library("ggplot2")
library("timetk")
library("tidyverse")
library("plotly")
library("ggthemes")
library("dendextend")
library("zeallot")
library("shiny")
library("DT")
library("shinythemes")
library("shinydashboard")
library("factoextra")
library("plotly")
library("shinyWidgets")
library("ggcorrplot")
library("plot.matrix")
setwd("C:/Users/Aniruddh Padmanaban/Desktop/shinyapp")
# Functions
Table_head = function(start_year, portfolio_ABC){
# Reading Data
data = read.csv(paste("_", as.character(portfolio_ABC), ".csv", sep=""))
rownames(data)=data$Dates
data = data[,2:ncol(data)]
data = as.data.frame(colnames(data))
colnames(data)=c("Indicies")
return(data)
}
read_data = function(portfolio_letter){
data = read.csv(paste("_", as.character(portfolio_letter), ".csv", sep=""))
rownames(data)=data$Dates
data = data[,2:ncol(data)]
}
portfolio_a <- read_data("A")
portfolio_b <- read_data("B")
portfolio_c <- read_data("C")
TEST_OR_TRAIN_DATA = function(start_year, portfolio_ABC, test_train){
if (portfolio_ABC == "A"){
data = portfolio_a
}
if (portfolio_ABC == "B"){
data = portfolio_b
}
if (portfolio_ABC == "C"){
data = portfolio_c
}
# Daily Log Returns
data = as.xts(data)
data = na.omit(Return.calculate(data, method = "log"))
data = data.frame(Dates=index(data), coredata(data))
data$Dates = as.Date(data$Dates)
data$Dates = format(as.Date(data$Dates, format="%Y-%m-%d"))
# Splitting training and Test
tr_data = data[c(which(data$Dates>=start_year & data$Dates<=start_year+10)),]
tr_data = tr_data[,2:ncol(tr_data)]
test_data = data[c(which(data$Dates>=start_year+11 & data$Dates<start_year+15)),]
test_data = test_data[,2:ncol(test_data)]
if (test_train == 'training'){
return(as.data.frame(tr_data))
}
else{
return(as.data.frame(test_data))
}
}
cluster_cov = function(portfolio, clust_method, year){
clust_cov <- read.csv(paste(as.character(portfolio),
'_',
tolower(as.character(clust_method)),
'_',
as.character(year),
'.csv',sep = ""), row.names = 1)
return(as.matrix(clust_cov))
}
Simulation = function(tr_data, covari,linkage){
if(missing(covari)){
cov_mat <- cov(tr_data)
}
else{
cov_mat = covari
}
set.seed(123)
tick = colnames(tr_data)
num_port = 10000
mean_ret = colMeans(tr_data)
all_wts = matrix(nrow = num_port,ncol = length(tick))
port_returns = vector('numeric', length = num_port)
port_risk = vector('numeric', length = num_port)
sharpe_ratio = vector('numeric', length = num_port)
for (i in seq_along(port_returns)) {
wts = runif(length(tick))
wts = wts/sum(wts)
all_wts[i,] = wts
port_ret = sum(wts * mean_ret)
port_ret = port_ret*252
port_returns[i] = port_ret
port_sd = sqrt(t(wts) %*% (cov_mat%*% wts))
port_sd = port_sd*sqrt(252)
port_risk[i] = port_sd
sr = port_ret/port_sd
sharpe_ratio[i] = sr
}
portfolio_values = tibble(Return = port_returns,
Risk = port_risk,
SharpeRatio = sharpe_ratio)
all_wts = tk_tbl(all_wts)
colnames(all_wts) = colnames(tr_data)
portfolio_values = tk_tbl(cbind(all_wts, portfolio_values))
return(as.data.frame(portfolio_values))
}
Returns_data = function(tr_data){
correlation_matrix = cor_pmat(tr_data)
return(as.data.frame(correlation_matrix))
}
Cluster = function(tr_data){
correlation_matrix = cor(tr_data)
return(as.data.frame(correlation_matrix))
}
Weight_plot = function(data1){
data1_optimal = data1[c(which.max(data1$SharpeRatio)),]
weight_dataframe = as.data.frame(t(rbind(data1_optimal[1,1:10])))
colnames(weight_dataframe) = c("Optimal Sharpe")
return(as.data.frame(weight_dataframe))
}
######################################################################
#shinyApp(
ui <- fluidPage(
theme = shinytheme("cosmo"),
titlePanel(h1(strong("Network Analysis and Clustering in QWIM"))),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "yearInput",
label = "Starting Year",
min = 1990,
max = 2004,
value = c(1991),
sep = ""),
textOutput("training_range"),
textOutput("testing_range"),
radioGroupButtons(
inputId = "linkageASCW",
status="primary",
label = "Clustering Linkage method:",
choices = list("Average", "Complete", "Single", "Ward"),
justified = TRUE,
checkIcon = list(
yes = icon("ok",
lib = "glyphicon")),
),
radioGroupButtons(
inputId = "portfolioABC",
status="primary",
label = "Portfolio:",
choices = list("A", "B", "C"),
justified = TRUE,
checkIcon = list(
yes = icon("ok",
lib = "glyphicon")),
),
DT::dataTableOutput("table_head"),
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel(
"Description",
h3(strong("Welcome to our Shiny Application")),
plotOutput("cor_plot",  width = "100%")
),
tabPanel(
"Simulation",
plotlyOutput("Simulation_plot1", width = "100%"),
plotlyOutput("Simulation_plot",  width = "100%")
),
tabPanel(
"Clustering",
plotOutput("cluster_plot",  width = "100%")
),
tabPanel(
"Weights",
plotlyOutput("weight_plot",  width = "100%")
),
tabPanel(
"Results",
plotlyOutput("results"),
plotOutput("win_loss")
)
)
)
)
)
server <- function(input, output) {
win_loss_data = reactive({
portfolio_nam <- input$portfolioABC
})
correlation_plot = reactive({
cor(Returns_data(TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'training')))
})
plotting_data = reactive({
Simulation(TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'training'),
as.matrix(cluster_cov(input$portfolioABC,input$linkageASCW,input$yearInput)),
tolower(as.character(input$linkageASCW)))
})
plotting_data1 = reactive({
Simulation(TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'training'), linkage = tolower(as.character(input$linkageASCW)))
})
cluster_data = reactive({
Cluster(TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'training'))
})
weight_plot_data = reactive({
Weight_plot(Simulation(TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'training'),
as.matrix(cluster_cov(input$portfolioABC,input$linkageASCW,input$yearInput)),
tolower(as.character(input$linkageASCW))))
})
output$win_loss = renderPlot({
test_raster <- read.csv(paste("RESULTS_", as.character(win_loss_data()),".csv", sep = ""), row.names = 1)
test_raster <- t(test_raster)
test_raster <- as.matrix(test_raster)
plot(test_raster, xlab='', ylab='', col = hcl.colors(n = 7, palette = "RdYlGn"),
key = NULL,
main = paste("Portfolio", as.character(win_loss_data()), "Win/Loss", sep = " "))
})
output$results = renderPlotly({
testing_data = TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'testing')
testing_covariance = cov(testing_data)
testing_returns = colMeans(testing_data)
# BENCHMARK
testing_weights = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'training'), linkage = tolower(as.character(input$linkageASCW))))
return1= t(as.matrix(testing_returns))%*%as.matrix(testing_weights[,1])
return1 = return1*252
risk1 = sqrt(t(as.matrix(testing_weights[,1])) %*% (as.matrix(testing_covariance) %*% as.matrix(testing_weights[,1])))
risk1 = risk1*sqrt(252)
# CLUSTER
testing_weights = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'training'),
as.matrix(cluster_cov(input$portfolioABC,input$linkageASCW,input$yearInput)),
tolower(as.character(input$linkageASCW))))
return2= t(as.matrix(testing_returns))%*%as.matrix(testing_weights[,1])
return2 = return2*252
risk2 = sqrt(t(as.matrix(testing_weights[,1])) %*% (as.matrix(testing_covariance) %*% as.matrix(testing_weights[,1])))
risk2 = risk2*sqrt(252)
traditional_results = c(return1, risk1, return1/risk1)
cluster_results = c(return2, risk2, return2/risk2)
final_results = as.data.frame(cbind(traditional_results, cluster_results))
colnames(final_results)= c("Traditional", "Cluster")
rownames(final_results)= c("PortfolioReturn", "PortfolioRisk", "SharpeRatio")
final_results = final_results[c(1,2),]
fig = plot_ly(data = final_results,
x = rownames(final_results),
y = final_results[,1],
marker = list(color = 'rgba(204,78,37,255)'),
name = 'Traditional',
type = 'bar')
fig = fig %>% add_trace(y=final_results[,2],
marker = list(color = 'rgba(89,159,63,255)'),
name="Cluster")
fig = fig %>% layout(title = "Traditional vs. Cluster")
fig
})
output$table_head = DT::renderDataTable({
Table_head(input$yearInput, input$portfolioABC)
})
output$training_range = reactive({
print(paste("Training Data Range:", as.character(input$yearInput), "-", as.character(input$yearInput+10)))
})
output$testing_range = reactive({
print(paste("Testing Data Range: ", as.character(input$yearInput+11), "-", as.character(input$yearInput+15)))
})
output$cor_plot = renderPlot({
p1 = ggcorrplot(correlation_plot(),
outline.color = "black",
colors = c("#E46E00", "white", "#599F3F"))
p1
}, height = 700 , width = 700)
output$Simulation_plot = renderPlotly({
mvef_title = paste("Clustering - Portfolio Optimization & Efficient Frontier",
as.character(input$yearInput), sep=" - ")
data_1 = plotting_data()
m = data_1[which.max(data_1$SharpeRatio), ]
a = list(
label="label",
x = m$Risk,
y = m$Return,
text = "Optimal\nSharpe\nRatio",
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 1,
ax = 0,
ay = -50
)
bench = plot_ly(data_1,
x=~Risk,
y=~Return,
color = ~SharpeRatio,
marker = list(size = 5,
line = list(color = 'rgba(0, 0, 0, 0.5)',
width = 1)),
colors = "YlGn",
hoverinfo = 'text',
text = ~paste('</br> Sharpe Ratio: ', SharpeRatio,
'</br> Return: ', Return,
'</br> Risk: ', Risk))
bench = bench %>% layout(title = mvef_title)
bench = bench %>% layout(annotations = a)
bench
})
output$Simulation_plot1 = renderPlotly({
mvef_title = paste("Traditional - Portfolio Optimization & Efficient Frontier",
as.character(input$yearInput), sep=" - ")
data_1 = plotting_data1()
m = data_1[which.max(data_1$SharpeRatio), ]
a = list(
label="label",
x = m$Risk,
y = m$Return,
text = "Optimal\nSharpe\nRatio",
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 1,
ax = 0,
ay = -50
)
bench = plot_ly(data_1,
x=~Risk,
y=~Return,
color = ~SharpeRatio,
marker = list(size = 5,
line = list(color = 'rgba(0, 0, 0, 0.5)',
width = 1)),
colors = "YlOrRd",
hoverinfo = 'text',
text = ~paste('</br> Sharpe Ratio: ', SharpeRatio,
'</br> Return: ', Return,
'</br> Risk: ', Risk))
bench = bench %>% layout(title = mvef_title)
bench = bench %>% layout(annotations = a)
bench
})
output$cluster_plot = renderPlot({
cluster_title = paste("Dendograms",as.character(input$yearInput), sep=" - ")
distances = dist(cluster_data(), method = 'euclidean')
hclust_avg = hclust(distances, method = tolower(as.character(input$linkageASCW)))
avg_dend_obj = as.dendrogram(hclust_avg)
p=fviz_dend(hclust_avg, k = 4,
cex = 1.3,
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE,
rect = TRUE,
rect_border = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
rect_fill = TRUE,
main = as.character(cluster_title))
p
})
output$weight_plot = renderPlotly({
weights_title = paste("Portfolio weights",
as.character(input$yearInput), sep=" - ")
weight_dataframe1 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'training'),
linkage = tolower(as.character(input$linkageASCW))))
weight_dataframe2 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(input$yearInput, input$portfolioABC, 'training'),
as.matrix(cluster_cov(input$portfolioABC,input$linkageASCW,input$yearInput)),
tolower(as.character(input$linkageASCW))))
final_weights = cbind(weight_dataframe1, weight_dataframe2)
print(final_weights)
fig = plot_ly(data = final_weights,
x = rownames(final_weights),
y = final_weights[,1],
marker = list(color = 'rgba(204,78,37,255)'),
name = 'Traditional',
type = 'bar')
fig = fig %>% add_trace(y=final_weights[,2],
marker = list(color = 'rgba(89,159,63,255)'),
name="Cluster")
fig = fig %>% layout(title = weights_title)
fig
})
}
years = NULL
win_loss = NULL
for (ijk in 1990:2004){
year = as.numeric(ijk)
port = 'C'
linkage = 'ward'
testing_covariance = cov(TEST_OR_TRAIN_DATA(year, port, 'testing'))
testing_returns = colMeans(TEST_OR_TRAIN_DATA(year, port, 'testing'))
weights1 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(year, port, 'training')))
return1= t(as.matrix(testing_returns))%*%as.matrix(weights1)
return1 <- return1*252
risk1 = sqrt(t(as.matrix(weights1)) %*% as.matrix(testing_covariance) %*% as.matrix(weights1))
risk1 <- risk1*sqrt(252)
sharperatio1 = return1/(risk1)
x = cluster_cov(port, linkage, year = year)
weights2 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(year, port, 'training'),covari=as.matrix(x), linkage))
return2= t(as.matrix(testing_returns))%*%as.matrix(weights2)
return2 <- return2*252
risk2 = sqrt(t(as.matrix(weights2)) %*% as.matrix(testing_covariance) %*% as.matrix(weights2))
risk2 = risk2*sqrt(252)
sharperatio2 = return2/risk2
print(year+15)
years[ijk-1989] = year+15
win_loss[ijk-1989]=sharperatio1
}
years = NULL
win_loss = NULL
for (ijk in 1990:2004){
year = as.numeric(ijk)
port = 'A'
linkage = 'ward'
testing_covariance = cov(TEST_OR_TRAIN_DATA(year, port, 'testing'))
testing_returns = colMeans(TEST_OR_TRAIN_DATA(year, port, 'testing'))
weights1 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(year, port, 'training')))
return1= t(as.matrix(testing_returns))%*%as.matrix(weights1)
return1 <- return1*252
risk1 = sqrt(t(as.matrix(weights1)) %*% as.matrix(testing_covariance) %*% as.matrix(weights1))
risk1 <- risk1*sqrt(252)
sharperatio1 = return1/(risk1)
x = cluster_cov(port, linkage, year = year)
weights2 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(year, port, 'training'),covari=as.matrix(x), linkage))
return2= t(as.matrix(testing_returns))%*%as.matrix(weights2)
return2 <- return2*252
risk2 = sqrt(t(as.matrix(weights2)) %*% as.matrix(testing_covariance) %*% as.matrix(weights2))
risk2 = risk2*sqrt(252)
sharperatio2 = return2/risk2
print(year+15)
years[ijk-1989] = year+15
win_loss[ijk-1989]=sharperatio1
}
#rm(final_results)
final_results = as.data.frame(cbind(win_loss), row.names = years)
View(final_results)
years = NULL
win_loss = NULL
for (ijk in 1990:2004){
year = as.numeric(ijk)
port = 'A'
linkage = 'ward'
testing_covariance = cov(TEST_OR_TRAIN_DATA(year, port, 'testing'))
testing_returns = colMeans(TEST_OR_TRAIN_DATA(year, port, 'testing'))
weights1 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(year, port, 'training')))
return1= t(as.matrix(testing_returns))%*%as.matrix(weights1)
return1 <- return1*252
risk1 = sqrt(t(as.matrix(weights1)) %*% as.matrix(testing_covariance) %*% as.matrix(weights1))
risk1 <- risk1*sqrt(252)
sharperatio1 = return1/(risk1)
x = cluster_cov(port, linkage, year = year)
weights2 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(year, port, 'training'),covari=as.matrix(x), linkage))
return2= t(as.matrix(testing_returns))%*%as.matrix(weights2)
return2 <- return2*252
risk2 = sqrt(t(as.matrix(weights2)) %*% as.matrix(testing_covariance) %*% as.matrix(weights2))
risk2 = risk2*sqrt(252)
sharperatio2 = return2/risk2
print(year+15)
years[ijk-1989] = year+15
win_loss[ijk-1989]=sharperatio2
}
final_results = as.data.frame(cbind(final_results, win_loss))
final_results
years = NULL
win_loss = NULL
for (ijk in 1990:2004){
year = as.numeric(ijk)
port = 'A'
linkage = 'single'
testing_covariance = cov(TEST_OR_TRAIN_DATA(year, port, 'testing'))
testing_returns = colMeans(TEST_OR_TRAIN_DATA(year, port, 'testing'))
weights1 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(year, port, 'training')))
return1= t(as.matrix(testing_returns))%*%as.matrix(weights1)
return1 <- return1*252
risk1 = sqrt(t(as.matrix(weights1)) %*% as.matrix(testing_covariance) %*% as.matrix(weights1))
risk1 <- risk1*sqrt(252)
sharperatio1 = return1/(risk1)
x = cluster_cov(port, linkage, year = year)
weights2 = Weight_plot(Simulation(TEST_OR_TRAIN_DATA(year, port, 'training'),covari=as.matrix(x), linkage))
return2= t(as.matrix(testing_returns))%*%as.matrix(weights2)
return2 <- return2*252
risk2 = sqrt(t(as.matrix(weights2)) %*% as.matrix(testing_covariance) %*% as.matrix(weights2))
risk2 = risk2*sqrt(252)
sharperatio2 = return2/risk2
print(year+15)
years[ijk-1989] = year+15
win_loss[ijk-1989]=sharperatio2
}
final_results = as.data.frame(cbind(final_results, win_loss))
final_results
colnames(final_results) = c('Traditional', 'Ward', 'Single')
final_results
write.csv(final_results, "finalcomparison.csv")
